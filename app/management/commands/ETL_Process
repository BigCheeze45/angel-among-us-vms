from django.core.management.base import BaseCommand
from django.db import connections

from app.models.Team import Team
from app.models.Volunteer import Volunteer
from app.models.TeamCategory import TeamCategory
from app.models.SkillCategory import SkillCategory
from app.models.VolunteerTeam import VolunteerTeam
from app.models.VolunteerSkill import VolunteerSkill
from app.models.VolunteerActivity import VolunteerActivity
from app.models.VolunteerMilestone import VolunteerMilestone


from django.core.mail import send_mail


class Command(BaseCommand):
    help = "ETL process to extract data from iShelter and populate the VMS database"

    def handle(self, *args, **kwargs):
        # connect to dummy ishelters database
        ishelter_db = connections["aau_ishelters"]
        vms_db = connections["default"]

        # Extract data from iShelter
        ishelter_volunteers = ishelter_db.objects.using("aau_ishelters").all()

        new_inserts = []
        updated_records = []
        failures = []

        for is_volunteer in ishelter_volunteers:
            try:
                # Try to find the matching record in VMS
                vms_volunteer = (
                    Volunteer.objects.using("default")
                    .filter(id=is_volunteer.id)
                    .first()
                )

                if vms_volunteer:
                    # Update if any fields have changed
                    updated = False
                    if vms_volunteer.name != is_volunteer.name:
                        vms_volunteer.name = is_volunteer.name
                        updated = True
                    if vms_volunteer.roles != is_volunteer.roles:
                        vms_volunteer.roles = is_volunteer.roles
                        updated = True
                    if vms_volunteer.phone_number != is_volunteer.phone_number:
                        vms_volunteer.phone_number = is_volunteer.phone_number
                        updated = True
                    if vms_volunteer.email_address != is_volunteer.email_address:
                        vms_volunteer.email_address = is_volunteer.email_address
                        updated = True

                    if updated:
                        vms_volunteer.save(using="default")
                        updated_records.append(
                            {
                                "id": vms_volunteer.id,
                                "name": vms_volunteer.name,
                                "email": vms_volunteer.email_address,
                            }
                        )
                else:
                    # Insert new record
                    VMSVolunteer.objects.create(
                        id=is_volunteer.id,
                        name=is_volunteer.name,
                        roles=is_volunteer.roles,
                        phone_number=is_volunteer.phone_number,
                        email_address=is_volunteer.email_address,
                    )
                    new_inserts.append(
                        {"name": is_volunteer.name, "email": is_volunteer.email_address}
                    )
            except Exception as e:
                failures.append({"id": is_volunteer.id, "error": str(e)})

        # Generate report
        report = self.generate_report(
            len(ishelter_volunteers), new_inserts, updated_records, failures
        )

        # Send report via email
        self.send_report(report)

    def generate_report(self, total, new_inserts, updated_records, failures):
        report = f"ETL Report:\n\n"
        report += f"Total Records Extracted: {total}\n"
        report += f"New Inserts: {len(new_inserts)}\n"
        report += f"Updated Records: {len(updated_records)}\n"
        report += f"Failures: {len(failures)}\n\n"

        if new_inserts:
            report += "New Inserts:\n"
            for item in new_inserts:
                report += f"Name: {item['name']}, Email: {item['email']}\n"

        if updated_records:
            report += "\nUpdated Records:\n"
            for item in updated_records:
                report += (
                    f"ID: {item['id']}, Name: {item['name']}, Email: {item['email']}\n"
                )

        if failures:
            report += "\nFailures:\n"
            for item in failures:
                report += f"ID: {item['id']}, Error: {item['error']}\n"

        return report

    def send_report(self, report):
        # Send the email report
        send_mail(
            "ETL Report",
            report,
            "admin@example.com",
            [
                "recipient1@example.com",
                "recipient2@example.com",
            ],  # Configure this list as needed
        )
