# Generated by Django 5.1.1 on 2024-10-30 16:54

from django.db import migrations
from django.contrib.auth.models import Group as G, Permission
from django.db.utils import Error


# https://eshlox.net/2019/07/27/adding-groups-via-django-db-migration-script-and-assigning-a-group-to-all-existing--users
def apply_migration(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Group: G = apps.get_model("auth", "Group")

    # region Administrator Group
    admin_g = Group.objects.using(db_alias).filter(name="Administrator").first()
    # give all permissions to the group
    for permission in Permission.objects.using(db_alias).all():
        admin_g.permissions.add(permission.id)
    admin_g.save()
    # endregion

    # region Editor Group
    editor_g = Group.objects.using(db_alias).filter(name="Editor").first()
    # editor can see everything except users
    for permission in (
        Permission.objects.using(db_alias).exclude(codename__icontains="user").all()
    ):
        editor_g.permissions.add(permission.id)
    editor_g.save()
    # endregion

    # region Viewer Group
    viewer_g = Group.objects.using(db_alias).filter(name="Viewer").first()
    # viewer has read only access to Teams & Volunteers
    read_only_no_user = (
        Permission.objects.using(db_alias)
        # exclude all user related permissions
        .exclude(codename__icontains="user")
        # select view only permissions
        .filter(codename__icontains="view").all()
    )
    for perm in read_only_no_user:
        viewer_g.permissions.add(perm.id)
    viewer_g.save()
    # endregion


def unapply_migration(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Group: G = apps.get_model("auth", "Group")
    try:
        admin_g = Group.objects.using(db_alias).filter(name="Administrator").first()
        admin_g.permissions.all().delete()
    except Error:
        pass

    try:
        editor_g = Group.objects.using(db_alias).filter(name="Editor").first()
        editor_g.permissions.all().delete()
    except Error:
        pass

    try:
        viewer_g = Group.objects.using(db_alias).filter(name="Viewer").first()
        viewer_g.permissions.all().delete()
    except Error:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ("app", "0002_create_default_roles"),
    ]

    operations = [
        migrations.RunPython(code=apply_migration, reverse_code=unapply_migration)
    ]
