volumes:
  # use named volume to persist data, in this case the database
  pgdata:
  ishelters:


secrets:
  # share senstive info without exposing them via environment variables
  secret_key:
    environment: SECRET_KEY
  postgres_user:
    environment: POSTGRES_USER
  postgres_db:
    environment: POSTGRES_DATABASE
  postgres_passwd:
    environment: POSTGRES_PASSWORD
  email_user:
    environment: EMAIL_USER
  email_password:
    environment: EMAIL_PASSWORD

services:
  # See https://hub.docker.com/_/postgres
  database:
    image: postgres
    container_name: database
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_passwd
      - TZ=${GLOBAL_TIMEZONE:-America/New_York}
    secrets:
      - postgres_db
      - postgres_user
      - postgres_passwd
    # Healthcheck for database
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $(cat $$POSTGRES_USER_FILE) -d $(cat $$POSTGRES_DB_FILE)" ]
      interval: 30s
      retries: 5
      start_period: 15s

  django:
    working_dir: /app
    volumes:
      # The defaults value . is added so that the docker-compose.yaml file can
      # work when running docker-outside-of-docker in devcontainer
      - ${LOCAL_WORKSPACE_FOLDER:-.}:/app
    image: aau-vms-backend
    container_name: django
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-host.docker.internal}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-aau_vms}
      ISHELTERS_HOST: ${ISHELTERS_HOST:-host.docker.internal}
      ISHELTERS_DATABASE: ${ISHELTERS_DATABASE:-ishelters}
    env_file:
      - .env
    ports:
      - ${DJANGO_PORT}:8000
    entrypoint: [ "python", "manage.py", "runserver", "0.0.0.0:$DJANGO_PORT" ]
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:${DJANGO_PORT:-8000}/status || exit 1" ]
      interval: 30s
      retries: 3
      start_period: 15s

  react-admin:
    image: aau-vms-frontend
    container_name: react
    env_file:
      - .env
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/.env:/app/.env
      - ${LOCAL_WORKSPACE_FOLDER:-.}/react-admin:/app
    ports:
      - ${VITE_PORT:-80}:5173
    depends_on:
      database:
        condition: service_healthy
      django:
        condition: service_healthy
      ishelters:
        condition: service_healthy

  ishelters:
    image: mysql
    container_name: ishelters
    environment:
      MYSQL_USER: ${ISHELTERS_USERNAME}
      MYSQL_PASSWORD: ${ISHELTERS_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${ISHELTERS_PASSWORD}
      MYSQL_DATABASE: ${ISHELTERS_DATABASE:-ishelters}
    ports:
      - ${ISHELTERS_PORT:-3306}:3306
    volumes:
      - ishelters:/var/lib/mysql
      - ${LOCAL_WORKSPACE_FOLDER:-.}/docker_init/ishelters:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      retries: 3
      start_period: 15s
